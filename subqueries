@ SUBQUERIES

SubQueries are queries which are nested inside other queries. Hence, they are also called as nested queries. A subquery is used to return data that can be used in the main query.


The reason for the above problem is that our second query has a fixed value which is not updated dynamically based on the creation of a new student OR updation of a student entry. This problem can be easily solved using subqueries.


You can use subqueries in the below SQL clauses

* SELECT clause
* WHERE clause
* HAVING clause
* FROM clause

Using Subqueries in the SELECT Clause

SELECT statement is used to select the columns to retrieve data from or to evaluate an expression to a single value.
A subquery which is used in the SELECT clause should return a single value. In this case, you can think of the subquery as a 'single value expression'.

Scenario - I
We use a Subquery in the SELECT clause when we need an aggregate value of a table as a new column in the data which we plan to retrieve.


* The expression in the above SQL query is age - (SELECT AVG(age) FROM Student) and (SELECT AVG(age) FROM Student) is the SubQuery.

* Write an SQL query to find the variance percentage of student age
    * variance percentage of student age (variance_percent) = (age - avg_age)/avg_age
    * avg_age is the variance i.e the difference between age of a student and the average age of all the students.
    * Your query should return in id, name, age, variance, and variance_percent columns


Correlated Queries

We can also use an outer query’s value in the subquery. Such subqueries are called as correlated subqueries. 
Correlated queries are also called as 'synchronized queries'.

In a simple subquery in SELECT clause, the subquery result is the same for all the records in the final output. Whereas, in a correlated subquery, the result of the subquery depends on the values passed from the outer query.

* A Correlated subquery need not be executed on the same table which is used in the outer query.


Correlated Subqueries versus Inner Joins


In some cases, you might be able to solve a problem using a Subquery or an Inner Join. For example, you could've used Inner Join to solve the above Correlated Subqueries question.


Key Points

* SubQueries could be slower - A correlated subquery could be “executed/run” once for each row returned in the outer query. Whereas, the INNER JOIN will only make one pass through the data. Although there are some exceptions to this behaviour, based on the type of the underlying databased used, it is generally recommended to use Inner Joins in such situations.
* Readability wise, depending upon what you’re comfortable with, you may find the INNER JOIN example easier to read than the correlated query.

Using SubQueries in the WHERE Clause

Similar to SELECT clause we can also use SubQueries in WHERE clause. A subquery in a WHERE clause can be used to qualify a column against a set of rows. Below are some scenarios where we should use SubQuery in WHERE clause.

Scenario - I (Exist and Not Exists)

An EXISTS condition can be used in combination with a subquery. It results in TRUE whenever the subquery returns one or more values else results in FALSE. And a NOT EXISTS condition results in TRUE if zero rows are returned.

1. (SELECT e.student_id FROM Enrollment e WHERE s.id=e.student_id and e.course_id=1) to find if the user is registered in course 1
2. (SELECT e.student_id FROM Enrollment e WHERE s.id=e.student_id and e.course_id<>1) to find if the user is not registered for course 2


Points to remember

* The WHERE clause returns all records where the EXISTS clause is TRUE.
* Here EXIST clause uses a correlated subquery. The outer query is correlated to the inner query.
* The EXISTS clause returns TRUE if one or more rows are returned by the subquery.


Using Subqueries in the HAVING Clause

HAVING clause is used filter the groups of records generated by using GROUP BY, you can use subqueries in HAVING clause to perform powerful operations.


Key points
* A derived table(subquery) must be aliased so that you can reference its results.

Correlated Subqueries in HAVING clause. subqueries in HAVING clause can be correlated with fields from the outer query.

Key points
* You can use subqueries in HAVING clause to filter out groups of records.
* HAVING is very useful in filtering on aggregate values such as averages, summations, and count.









* SELECT  name  FROM   Student   WHERE  age > (SELECT  AVG(age)  FROM  Student);

* SELECT  id,name , age+id   FROM   Student;

* SELECT   name , age  *  100  AS  new_age  FROM   Student;

* SELECT name , new_age  FROM (SELECT   name , age  *  100  AS  new_age  FROM   Student);

* SELECT name , new_age/10  FROM (SELECT   name , age  *  100  AS  new_age  FROM   Student);

same answer of 4 and 5 because 10 is variable 

* select name  ,(select AVG(age) FROM Student) FROM Student; 


NOTE

* Subqueries up to 32 level deep on the SQL servers








